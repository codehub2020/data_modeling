import os
import glob
import psycopg2
import pandas as pd
from psycopg2.extras import execute_batch
from sql_queries import *


def process_song_file(cur, frame):
    """ process song file from data/song_data. function takes in song_file dataframe
    
    Arguments:
    cur: the cursor object. 
    frame: song data dataframe. 

    Returns:  None
    
    """
    
    # insert artist record
    song_data = frame[['song_id', 'title', 'artist_id', 'year', 'duration']].copy()
    execute_batch(cur, song_table_insert, song_data.values)
    
    
    # insert artist record
    artist_data = frame[['artist_id','artist_name','artist_location','artist_latitude','artist_longitude']].copy()
    execute_batch(cur, artist_table_insert, artist_data.values)
    


def process_log_file(cur, frame):
    """ process log data of user activity. function takes in log_data dataframe
    
    Arguments:
    cur: the cursor object. 
    frame: log activity dataframe. 

    Returns:  None
    
    """
   
    # filter by NextSong action
    df = frame[frame.page =='NextSong'].copy()

    # convert timestamp column to datetime
    df['ts'] = pd.to_datetime(df['ts'],unit='ms')
    t = df[['ts']].copy()
    
    # insert time data records
    time_data = list((t.ts.dt.values, t.ts.dt.hour.values, t.ts.dt.day.values, t.ts.dt.weekofyear.values,
            t.ts.dt.month.values, t.ts.dt.year.values, t.ts.dt.weekday.values))

    column_labels = ['timestamp', 'hour', 'day', 'week of year', 'month', 'year', 'weekday']
    
    time_data_dict = dict(zip(column_labels,time_data))
    
    # load user table
    time_df = pd.DataFrame.from_dict(time_data_dict)
    execute_batch(cur, time_table_insert, time_df.values)
    

    # load user table
    user_df = df[['userId','firstName','lastName','gender','level']].copy()
    execute_batch(cur, user_table_insert, user_df.values)
    #conn.commit()
    

    # insert songplay records
    
    #list for dataframe columns
    cols = ['ts','userId','level', 'songid', 'artistid','sessionId','location','userAgent']
    
    #Since bulk insert is used, create a dataframe to hold all songplay data
    song_play_df = pd.DataFrame(columns = cols)
    
    for index, row in df.iterrows():
        
        # get songid and artistid from song and artist tables
        cur.execute(song_select, (row.song, row.artist, row.length))
        results = cur.fetchone()
        
        if results:
            songid, artistid = results
        else:
            songid, artistid = None, None

        # insert songplay record
        # note: songplay_id is auto_generated by postgress
        songplay_data_temp = pd.DataFrame([(row.ts,row.userId,row.level,songid,artistid,
                                            row.sessionId,row.location,row.userAgent)], columns = cols)
        
        song_play_df = song_play_df.append(songplay_data_temp)
        
     
    
    execute_batch(cur, songplay_table_insert, song_play_df.values)
        
        
        
        
        
def process_data(cur, conn, filepath, func):
    """get all files matching extension from directory
    
    Arguments:
    cur: the cursor object. 
    filepath: log data file path.
    func: process_log_file or process_song_file functions

    Returns:  None  
    """
    all_files = []
    for root, dirs, files in os.walk(filepath):
        files = glob.glob(os.path.join(root,'*.json'))
        for f in files :
            all_files.append(os.path.abspath(f))

    # get total number of files found
    num_files = len(all_files)
    print('{} files found in {}'.format(num_files, filepath))

    # iterate over files and process 
    # for bulk insert execution, create a dataframe to hold all records
    df = pd.DataFrame()
    for i, datafile in enumerate(all_files, 1):
        temp_df = pd.read_json(datafile,lines=True)
        df = df.append(temp_df)
        
    func(cur, df)
    conn.commit()
    
    
    
def main():
    conn = psycopg2.connect("host=127.0.0.1 dbname=sparkifydb user=student password=student")
    cur = conn.cursor()

    process_data(cur, conn, filepath='data/song_data', func=process_song_file)
    process_data(cur, conn, filepath='data/log_data', func=process_log_file)

    conn.close()


if __name__ == "__main__":
    main()